@page "/user/login"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.WebUtilities

@attribute [Authorize]

@inject LogOutService LogOutService
@inject NavigationManager Nav

@code {
    private static Uri _placeholderHostUri = new Uri("http://notused");

    [SupplyParameterFromQuery]
    public bool ForceLogIn { get; set; }

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    [CascadingParameter]
    public required HttpContext HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var returnUrl = ReturnUrl ?? "/";

        if (ForceLogIn)
        {
            await LogOutService.LogOutAsync(HttpContext);
            // Navigate back to the login page to force the user to log in again
            var loginUrl = Url(Nav, returnUrl: returnUrl);
            Nav.NavigateTo(loginUrl, forceLoad: true);
            return;
        }

        // Ensure we only redirect to relative URLs (prevent open redirect attacks)
        var url = new Uri(returnUrl, UriKind.RelativeOrAbsolute);
        Nav.NavigateTo(url.IsAbsoluteUri ? "/" : returnUrl);
    }

    public static string Url(NavigationManager nav, string? returnUrl = null, bool preserveQuery = true, bool forceLogIn = false)
    {
        var loginUrl = "user/login";
        returnUrl ??= nav.Uri;

        if (Uri.TryCreate(returnUrl, UriKind.Absolute, out var returnUri))
        {
            if (!preserveQuery)
            {
                // Remove the query string from the return URL
                returnUrl = returnUri.GetComponents(UriComponents.SchemeAndServer | UriComponents.Path, UriFormat.SafeUnescaped);
            }
            // Make the return URL relative
            returnUrl = nav.ToBaseRelativePath(returnUrl);
        }
        else if (!preserveQuery)
        {
            // It's a relative URL so use a placeholder host
            returnUrl = new Uri(_placeholderHostUri, returnUrl).GetComponents(UriComponents.Path, UriFormat.SafeUnescaped);
        }

        if (forceLogIn)
        {
            loginUrl = QueryHelpers.AddQueryString(loginUrl, nameof(ForceLogIn), bool.TrueString);
        }

        loginUrl = QueryHelpers.AddQueryString(loginUrl, nameof(ReturnUrl), returnUrl);

        return loginUrl;
    }
}
